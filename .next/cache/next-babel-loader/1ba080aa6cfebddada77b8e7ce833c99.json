{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Formik } from 'formik';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { errorParser, windowExists } from 'storejars-react-toolkit';\nimport { metaSelector, action } from '../../redux/entities/serviceRequests';\nimport { Button, Banner, TextInput } from '../../components';\nimport { routes } from '../../routes';\nexport default function UserDetails(compProps) {\n  const ioRequest = useSelector(state => metaSelector(state).create);\n  const dispatch = useDispatch();\n  const {\n    success,\n    error,\n    loading\n  } = ioRequest;\n\n  const reset = () => dispatch(action.createAction({}).reset);\n\n  if (success) {\n    setTimeout(() => {\n      windowExists.location.href = routes.serviceRequest.path;\n    }, 3000);\n  }\n\n  const schema = Yup.object({\n    address: Yup.string().required(),\n    lga: Yup.string().required(),\n    phone: Yup.string().required(),\n    email: Yup.string().required(),\n    name: Yup.string().required()\n  });\n  return __jsx(\"div\", {\n    className: \"result-filter-wrapper min-height-600\"\n  }, __jsx(\"h3\", null, \"Contact Details\"), __jsx(\"div\", {\n    className: \"content\"\n  }, error && __jsx(Banner.Error, {\n    message: error,\n    reset: reset\n  }), success && __jsx(Banner.Success, {\n    message: \"Service request received successfully, a member of our team would reach out to you as soon as possible\",\n    reset: reset\n  }), __jsx(Formik, {\n    initialValues: {\n      name: '',\n      email: '',\n      phone: '',\n      state: 'Lagos',\n      lga: '',\n      address: ''\n    },\n    validationSchema: schema,\n    onSubmit: values => {\n      const payload = _objectSpread(_objectSpread({}, compProps.values), values);\n\n      dispatch(action.createAction({}).reset);\n      dispatch(action.createAction(payload).loading);\n    }\n  }, props => {\n    const {\n      handleChange,\n      values,\n      handleSubmit,\n      errors,\n      touched\n    } = props;\n    return __jsx(\"form\", {\n      className: \"form-holder\",\n      onSubmit: handleSubmit\n    }, __jsx(TextInput, {\n      name: \"name\",\n      placeholder: \"Name\",\n      value: values.name,\n      onChange: handleChange,\n      error: errorParser(errors, touched, 'name')\n    }), __jsx(TextInput, {\n      name: \"email\",\n      type: \"email\",\n      placeholder: \"Email\",\n      value: values.email,\n      onChange: handleChange,\n      error: errorParser(errors, touched, 'email')\n    }), __jsx(TextInput, {\n      name: \"phone\",\n      placeholder: \"Phone\",\n      value: values.phone,\n      onChange: handleChange,\n      error: errorParser(errors, touched, 'phone')\n    }), __jsx(TextInput, {\n      name: \"lga\",\n      placeholder: \"LGA\",\n      value: values.lga,\n      onChange: handleChange,\n      error: errorParser(errors, touched, 'lga')\n    }), __jsx(TextInput, {\n      name: \"address\",\n      placeholder: \"Address\",\n      value: values.address,\n      onChange: handleChange,\n      error: errorParser(errors, touched, 'address')\n    }), __jsx(\"div\", {\n      className: \"mt-40\"\n    }, __jsx(\"button\", {\n      type: \"button\",\n      className: \"btn btn-block next-btn float-l\",\n      onClick: () => compProps.previous()\n    }, \"Previous\"), __jsx(Button, {\n      isSubmitting: loading,\n      text: \"Submit\"\n    })));\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}