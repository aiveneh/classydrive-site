{"ast":null,"code":"import { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\nexport const action = new Actions(namespaces.SERVICES);\nexport const selector = createSelector(entities, state => state.services);\nexport const metaSelector = createSelector(entitiesMeta, state => state.services);\nexport const reducer = handleActions({\n  [action.read.success]: (state, action$) => produce(state, draft => {\n    draft.data = action$.payload;\n    return draft;\n  })\n}, {\n  data: []\n});\nexport const metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(ofType(action.read.loading), switchMap(({\n    payload\n  }) => {\n    return api.get$('/services').pipe(switchMap(({\n      response\n    }) => {\n      return of(action.readAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.readAction(responder(response)).error)));\n  }));\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(ofType(action.create.loading), switchMap(({\n    payload\n  }) => {\n    return api.post$('/services', payload).pipe(switchMap(({\n      response\n    }) => {\n      return of(action.createAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.createAction(responder(response)).error)));\n  }));\n}\n\nfunction updateEpic(action$) {\n  return action$.pipe(ofType(action.update.loading), switchMap(({\n    payload\n  }) => {\n    return api.patch$(`/services/${payload._id}`, payload).pipe(switchMap(({\n      response\n    }) => {\n      return of(action.updateAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.updateAction(responder(response)).error)));\n  }));\n}\n\nexport const epic = combineEpics(readEpic, createEpic, updateEpic);","map":{"version":3,"sources":["/Users/macbook/Documents/projects/classydrive/classydrive-web/site/src/redux/entities/services.ts"],"names":["handleActions","createSelector","produce","combineEpics","ofType","catchError","switchMap","of","Actions","entitiesMeta","entities","responder","metas","api","namespaces","action","SERVICES","selector","state","services","metaSelector","reducer","read","success","action$","draft","data","payload","metaReducer","readEpic","pipe","loading","get$","response","readAction","error","createEpic","create","post$","createAction","updateEpic","update","patch$","_id","updateAction","epic"],"mappings":"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","sourcesContent":["import { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\n\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\n\nexport const action = new Actions(namespaces.SERVICES);\n\nexport const selector = createSelector(entities, (state) => state.services);\nexport const metaSelector = createSelector(entitiesMeta, (state) => state.services);\n\nexport const reducer = handleActions(\n  {\n    [action.read.success]: (state, action$) =>\n      produce(state, (draft) => {\n        draft.data = action$.payload;\n        return draft;\n      }),\n  },\n  { data: [] },\n);\n\nexport const metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(\n    ofType(action.read.loading),\n    switchMap(({ payload }) => {\n      return api.get$('/services').pipe(\n        switchMap(({ response }) => {\n          return of(action.readAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.readAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(\n    ofType(action.create.loading),\n    switchMap(({ payload }) => {\n      return api.post$('/services', payload).pipe(\n        switchMap(({ response }) => {\n          return of(action.createAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.createAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nfunction updateEpic(action$) {\n  return action$.pipe(\n    ofType(action.update.loading),\n    switchMap(({ payload }) => {\n      return api.patch$(`/services/${payload._id}`, payload).pipe(\n        switchMap(({ response }) => {\n          return of(action.updateAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.updateAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nexport const epic = combineEpics(readEpic, createEpic, updateEpic);\n"]},"metadata":{},"sourceType":"module"}