{"ast":null,"code":"import { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\nexport const action = new Actions(namespaces.CARS);\nexport const selector = createSelector(entities, state => state.cars);\nexport const metaSelector = createSelector(entitiesMeta, state => state.cars);\nexport const reducer = handleActions({\n  [action.read.success]: (state, action$) => produce(state, draft => {\n    draft.data = action$.payload;\n    return draft;\n  })\n}, {\n  data: [],\n  item: {\n    exteriorImages: [],\n    interiorImages: [],\n    pros: [],\n    cons: []\n  },\n  similarCars: []\n});\nexport const metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(ofType(action.read.loading), switchMap(({\n    payload\n  }) => {\n    return api.get$('/cars').pipe(switchMap(({\n      response\n    }) => {\n      return of(action.readAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.readAction(responder(response)).error)));\n  }));\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(ofType(action.create.loading), switchMap(({\n    payload\n  }) => {\n    return api.multipartPost$('/cars', payload).pipe(switchMap(({\n      response\n    }) => {\n      return of(action.createAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.createAction(responder(response)).error)));\n  }));\n}\n\nfunction updateEpic(action$) {\n  return action$.pipe(ofType(action.update.loading), switchMap(({\n    payload\n  }) => {\n    return api.patch$(`/cars/${payload._id}`, payload).pipe(switchMap(({\n      response\n    }) => {\n      return of(action.updateAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.updateAction(responder(response)).error)));\n  }));\n}\n\nexport const epic = combineEpics(readEpic, createEpic, updateEpic);","map":{"version":3,"sources":["/Users/macbook/Documents/projects/classydrive/classydrive-web/site/src/redux/entities/cars.ts"],"names":["handleActions","createSelector","produce","combineEpics","ofType","catchError","switchMap","of","Actions","entitiesMeta","entities","responder","metas","api","namespaces","action","CARS","selector","state","cars","metaSelector","reducer","read","success","action$","draft","data","payload","item","exteriorImages","interiorImages","pros","cons","similarCars","metaReducer","readEpic","pipe","loading","get$","response","readAction","error","createEpic","create","multipartPost$","createAction","updateEpic","update","patch$","_id","updateAction","epic"],"mappings":"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","sourcesContent":["import { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\n\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\n\nexport const action = new Actions(namespaces.CARS);\n\nexport const selector = createSelector(entities, (state) => state.cars);\nexport const metaSelector = createSelector(entitiesMeta, (state) => state.cars);\n\nexport const reducer = handleActions(\n  {\n    [action.read.success]: (state, action$) =>\n      produce(state, (draft) => {\n        draft.data = action$.payload;\n        return draft;\n      }),\n  },\n  { data: [], item: { exteriorImages: [], interiorImages: [], pros: [], cons: [] }, similarCars: [] },\n);\n\nexport const metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(\n    ofType(action.read.loading),\n    switchMap(({ payload }) => {\n      return api.get$('/cars').pipe(\n        switchMap(({ response }) => {\n          return of(action.readAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.readAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(\n    ofType(action.create.loading),\n    switchMap(({ payload }) => {\n      return api.multipartPost$('/cars', payload).pipe(\n        switchMap(({ response }) => {\n          return of(action.createAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.createAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nfunction updateEpic(action$) {\n  return action$.pipe(\n    ofType(action.update.loading),\n    switchMap(({ payload }) => {\n      return api.patch$(`/cars/${payload._id}`, payload).pipe(\n        switchMap(({ response }) => {\n          return of(action.updateAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.updateAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nexport const epic = combineEpics(readEpic, createEpic, updateEpic);\n"]},"metadata":{},"sourceType":"module"}