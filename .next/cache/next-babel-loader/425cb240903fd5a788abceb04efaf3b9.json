{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\nexport var action = new Actions(namespaces.CARS);\nexport var selector = createSelector(entities, function (state) {\n  return state.cars;\n});\nexport var metaSelector = createSelector(entitiesMeta, function (state) {\n  return state.cars;\n});\nexport var reducer = handleActions(_defineProperty({}, action.read.success, function (state, action$) {\n  return produce(state, function (draft) {\n    draft.data = action$.payload;\n    return draft;\n  });\n}), {\n  data: [],\n  item: {\n    exteriorImages: [],\n    interiorImages: [],\n    pros: [],\n    cons: [],\n    features: []\n  },\n  similarCars: []\n});\nexport var metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(ofType(action.read.loading), switchMap(function (_ref) {\n    _objectDestructuringEmpty(_ref);\n\n    return api.get$('/cars').pipe(switchMap(function (_ref2) {\n      var response = _ref2.response;\n      return of(action.readAction(response.data).success);\n    }), catchError(function (_ref3) {\n      var response = _ref3.response;\n      return of(action.readAction(responder(response)).error);\n    }));\n  }));\n}\n\nfunction readOneEpic(action$) {\n  return action$.pipe(ofType(action.readOne.loading), switchMap(function (_ref4) {\n    var payload = _ref4.payload;\n    console.log(payload);\n    return api.patch$(\"/cars/\".concat(payload._id), payload).pipe(switchMap(function (_ref5) {\n      var response = _ref5.response;\n      return of(action.readOneAction(response.data).success);\n    }), catchError(function (_ref6) {\n      var response = _ref6.response;\n      return of(action.readOneAction(responder(response)).error);\n    }));\n  }));\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(ofType(action.create.loading), switchMap(function (_ref7) {\n    var payload = _ref7.payload;\n    return api.multipartPost$('/cars', payload).pipe(switchMap(function (_ref8) {\n      var response = _ref8.response;\n      return of(action.createAction(response.data).success);\n    }), catchError(function (_ref9) {\n      var response = _ref9.response;\n      return of(action.createAction(responder(response)).error);\n    }));\n  }));\n}\n\nfunction updateEpic(action$) {\n  return action$.pipe(ofType(action.update.loading), switchMap(function (_ref10) {\n    var payload = _ref10.payload;\n    return api.patch$(\"/cars/\".concat(payload._id), payload).pipe(switchMap(function (_ref11) {\n      var response = _ref11.response;\n      return of(action.updateAction(response.data).success);\n    }), catchError(function (_ref12) {\n      var response = _ref12.response;\n      return of(action.updateAction(responder(response)).error);\n    }));\n  }));\n}\n\nexport var epic = combineEpics(readEpic, readOneEpic, createEpic, updateEpic);","map":{"version":3,"sources":["/Users/macbook/Documents/projects/classydrive/classydrive-web/site/src/redux/entities/cars.ts"],"names":["handleActions","createSelector","produce","combineEpics","ofType","catchError","switchMap","of","Actions","entitiesMeta","entities","responder","metas","api","namespaces","action","CARS","selector","state","cars","metaSelector","reducer","read","success","action$","draft","data","payload","item","exteriorImages","interiorImages","pros","cons","features","similarCars","metaReducer","readEpic","pipe","loading","get$","response","readAction","error","readOneEpic","readOne","console","log","patch$","_id","readOneAction","createEpic","create","multipartPost$","createAction","updateEpic","update","updateAction","epic"],"mappings":"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","sourcesContent":["import { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\n\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\n\nexport const action = new Actions(namespaces.CARS);\n\nexport const selector = createSelector(entities, (state) => state.cars);\nexport const metaSelector = createSelector(entitiesMeta, (state) => state.cars);\n\nexport const reducer = handleActions(\n  {\n    [action.read.success]: (state, action$) =>\n      produce(state, (draft) => {\n        draft.data = action$.payload;\n        return draft;\n      }),\n  },\n  { data: [], item: { exteriorImages: [], interiorImages: [], pros: [], cons: [], features: [] }, similarCars: [] },\n);\n\nexport const metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(\n    ofType(action.read.loading),\n    switchMap(({}) => {\n      return api.get$('/cars').pipe(\n        switchMap(({ response }) => {\n          return of(action.readAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.readAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nfunction readOneEpic(action$) {\n  return action$.pipe(\n    ofType(action.readOne.loading),\n    switchMap(({ payload }) => {\n      console.log(payload);\n\n      return api.patch$(`/cars/${payload._id}`, payload).pipe(\n        switchMap(({ response }) => {\n          return of(action.readOneAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.readOneAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(\n    ofType(action.create.loading),\n    switchMap(({ payload }) => {\n      return api.multipartPost$('/cars', payload).pipe(\n        switchMap(({ response }) => {\n          return of(action.createAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.createAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nfunction updateEpic(action$) {\n  return action$.pipe(\n    ofType(action.update.loading),\n    switchMap(({ payload }) => {\n      return api.patch$(`/cars/${payload._id}`, payload).pipe(\n        switchMap(({ response }) => {\n          return of(action.updateAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.updateAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nexport const epic = combineEpics(readEpic, readOneEpic, createEpic, updateEpic);\n"]},"metadata":{},"sourceType":"module"}