{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { errorParser, windowExists } from 'storejars-react-toolkit';\nimport { metaSelector, action } from '../redux/entities/auth';\nimport { TextInput, Banner, PasswordInput, Button } from '../components';\nexport default function Register() {\n  var ioRequest = useSelector(function (state) {\n    return metaSelector(state).create;\n  });\n  var dispatch = useDispatch();\n  var success = ioRequest.success,\n      error = ioRequest.error,\n      loading = ioRequest.loading;\n\n  var reset = function reset() {\n    return dispatch(action.createAction({}).reset);\n  };\n\n  if (success) {\n    setTimeout(function () {\n      // TODO, this shoudl be a cline socde redirect\n      windowExists.location.href = '';\n    }, 3000);\n  }\n\n  var schema = Yup.object({\n    phone: Yup.string().min(3, 'Name should be more than 3 characters').required(),\n    password: Yup.string().min(3, 'Name should be more than 3 characters').required(),\n    email: Yup.string().required(),\n    lastName: Yup.string().min(3, 'Last Name should be more than 3 characters').required(),\n    firstName: Yup.string().min(3, 'First Name should be more than 3 characters').required()\n  });\n  return __jsx(\"div\", {\n    className: \"center\"\n  }, __jsx(\"div\", {\n    className: \"authBox\"\n  }, error && __jsx(Banner.Error, {\n    message: error,\n    reset: reset\n  }), success && __jsx(Banner.Success, {\n    message: \"Registration successful\",\n    reset: reset\n  }), __jsx(\"div\", {\n    className: \"result-filter-wrapper mh450\"\n  }, __jsx(\"h3\", null, \"Join Us\"), __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Formik, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      phone: ''\n    },\n    onSubmit: function onSubmit(values) {\n      dispatch(action.createAction({}).reset);\n      dispatch(action.createAction(values).loading);\n    },\n    validationSchema: schema\n  }, function (props) {\n    var handleChange = props.handleChange,\n        values = props.values,\n        handleSubmit = props.handleSubmit,\n        errors = props.errors,\n        touched = props.touched;\n    return __jsx(\"form\", {\n      className: \"form-holder\",\n      onSubmit: handleSubmit\n    }, __jsx(TextInput, {\n      name: \"firstName\",\n      placeholder: \"First Name\",\n      value: values.firstName,\n      onChange: handleChange,\n      error: errorParser(errors, touched, 'firstName')\n    }), __jsx(TextInput, {\n      name: \"lastName\",\n      placeholder: \"Last Name\",\n      value: values.lastName,\n      onChange: handleChange,\n      error: errorParser(errors, touched, 'lastName')\n    }), __jsx(TextInput, {\n      type: \"email\",\n      name: \"email\",\n      placeholder: \"Email\",\n      value: values.email,\n      onChange: handleChange,\n      error: errorParser(errors, touched, 'email')\n    }), __jsx(PasswordInput, {\n      name: \"password\",\n      placeholder: \"Password\",\n      value: values.password,\n      onChange: handleChange,\n      error: errorParser(errors, touched, 'password')\n    }), __jsx(TextInput, {\n      name: \"phone\",\n      placeholder: \"Phone\",\n      value: values.phone,\n      onChange: handleChange,\n      error: errorParser(errors, touched, 'phone')\n    }), __jsx(\"div\", {\n      className: \"mt-40\"\n    }, __jsx(Button, {\n      text: \"Register\",\n      isSubmitting: loading\n    })));\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}