{"ast":null,"code":"import { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\nexport const action = new Actions(namespaces.ENQUIRIES);\nexport const selector = createSelector(entities, state => state.enquiries);\nexport const metaSelector = createSelector(entitiesMeta, state => state.enquiries);\nexport const reducer = handleActions({\n  [action.read.success]: (state, action$) => produce(state, draft => {\n    draft = action$.payload;\n    return draft;\n  })\n}, []);\nexport const metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(ofType(action.read.loading), switchMap(({\n    payload\n  }) => {\n    return api.get$('/enquiries').pipe(switchMap(({\n      response\n    }) => {\n      return of(action.readAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.readAction(responder(response)).error)));\n  }));\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(ofType(action.create.loading), switchMap(({\n    payload\n  }) => {\n    return api.post$('/enquiries', payload).pipe(switchMap(({\n      response\n    }) => {\n      return of(action.createAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.createAction(responder(response)).error)));\n  }));\n}\n\nexport const epic = combineEpics(readEpic, createEpic);","map":null,"metadata":{},"sourceType":"module"}