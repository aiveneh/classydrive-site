{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\nexport var action = new Actions(namespaces.SERVICE_REQUESTS);\nexport var selector = createSelector(entities, function (state) {\n  return state.serviceRequests;\n});\nexport var metaSelector = createSelector(entitiesMeta, function (state) {\n  return state.serviceRequests;\n});\nexport var reducer = handleActions(_defineProperty({}, action.read.success, function (state, action$) {\n  return produce(state, function (draft) {\n    draft = action$.payload;\n    return draft;\n  });\n}), []);\nexport var metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(ofType(action.read.loading), switchMap(function (_ref) {\n    var payload = _ref.payload;\n    return api.get$('/service-requests').pipe(switchMap(function (_ref2) {\n      var response = _ref2.response;\n      return of(action.readAction(response.data).success);\n    }), catchError(function (_ref3) {\n      var response = _ref3.response;\n      return of(action.readAction(responder(response)).error);\n    }));\n  }));\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(ofType(action.create.loading), switchMap(function (_ref4) {\n    var payload = _ref4.payload;\n    return api.post$('/service-requests', payload).pipe(switchMap(function (_ref5) {\n      var response = _ref5.response;\n      return of(action.createAction(response.data).success);\n    }), catchError(function (_ref6) {\n      var response = _ref6.response;\n      return of(action.createAction(responder(response)).error);\n    }));\n  }));\n}\n\nexport var epic = combineEpics(readEpic, createEpic);","map":{"version":3,"sources":["/Users/macbook/Documents/projects/classydrive/classydrive-web/site/src/redux/entities/serviceRequests.ts"],"names":["handleActions","createSelector","produce","combineEpics","ofType","catchError","switchMap","of","Actions","entitiesMeta","entities","responder","metas","api","namespaces","action","SERVICE_REQUESTS","selector","state","serviceRequests","metaSelector","reducer","read","success","action$","draft","payload","metaReducer","readEpic","pipe","loading","get$","response","readAction","data","error","createEpic","create","post$","createAction","epic"],"mappings":"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","sourcesContent":["import { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\n\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\n\nexport const action = new Actions(namespaces.SERVICE_REQUESTS);\n\nexport const selector = createSelector(entities, (state) => state.serviceRequests);\nexport const metaSelector = createSelector(entitiesMeta, (state) => state.serviceRequests);\n\nexport const reducer = handleActions(\n  {\n    [action.read.success]: (state, action$) =>\n      produce(state, (draft) => {\n        draft = action$.payload;\n        return draft;\n      }),\n  },\n  [],\n);\n\nexport const metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(\n    ofType(action.read.loading),\n    switchMap(({ payload }) => {\n      return api.get$('/service-requests').pipe(\n        switchMap(({ response }) => {\n          return of(action.readAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.readAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(\n    ofType(action.create.loading),\n    switchMap(({ payload }) => {\n      return api.post$('/service-requests', payload).pipe(\n        switchMap(({ response }) => {\n          return of(action.createAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.createAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nexport const epic = combineEpics(readEpic, createEpic);\n"]},"metadata":{},"sourceType":"module"}