{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\nexport var action = new Actions(namespaces.CARS);\nexport var selector = createSelector(entities, function (state) {\n  return state.cars;\n});\nexport var metaSelector = createSelector(entitiesMeta, function (state) {\n  return state.cars;\n});\nexport var reducer = handleActions(_defineProperty({}, action.read.success, function (state, action$) {\n  return produce(state, function (draft) {\n    draft.data = action$.payload;\n    return draft;\n  });\n}), {\n  data: [],\n  item: {\n    exteriorImages: [],\n    interiorImages: [],\n    pros: [],\n    cons: []\n  },\n  similarCars: []\n});\nexport var metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(ofType(action.read.loading), switchMap(function (_ref) {\n    var payload = _ref.payload;\n    return api.get$('/cars').pipe(switchMap(function (_ref2) {\n      var response = _ref2.response;\n      return of(action.readAction(response.data).success);\n    }), catchError(function (_ref3) {\n      var response = _ref3.response;\n      return of(action.readAction(responder(response)).error);\n    }));\n  }));\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(ofType(action.create.loading), switchMap(function (_ref4) {\n    var payload = _ref4.payload;\n    return api.multipartPost$('/cars', payload).pipe(switchMap(function (_ref5) {\n      var response = _ref5.response;\n      return of(action.createAction(response.data).success);\n    }), catchError(function (_ref6) {\n      var response = _ref6.response;\n      return of(action.createAction(responder(response)).error);\n    }));\n  }));\n}\n\nfunction updateEpic(action$) {\n  return action$.pipe(ofType(action.update.loading), switchMap(function (_ref7) {\n    var payload = _ref7.payload;\n    return api.patch$(\"/cars/\".concat(payload._id), payload).pipe(switchMap(function (_ref8) {\n      var response = _ref8.response;\n      return of(action.updateAction(response.data).success);\n    }), catchError(function (_ref9) {\n      var response = _ref9.response;\n      return of(action.updateAction(responder(response)).error);\n    }));\n  }));\n}\n\nexport var epic = combineEpics(readEpic, createEpic, updateEpic);","map":null,"metadata":{},"sourceType":"module"}