{"ast":null,"code":"import { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\nexport const action = new Actions(namespaces.CARS);\nexport const selector = createSelector(entities, state => state.cars);\nexport const metaSelector = createSelector(entitiesMeta, state => state.cars);\nexport const reducer = handleActions({\n  [action.read.success]: (state, action$) => produce(state, draft => {\n    draft.data = action$.payload;\n    return draft;\n  }),\n  [action.readOne.success]: (state, action$) => produce(state, draft => {\n    draft.item = action$.payload;\n    return draft;\n  })\n}, {\n  data: [],\n  item: {\n    exteriorImages: [],\n    interiorImages: [],\n    pros: [],\n    cons: [],\n    features: []\n  },\n  similarCars: []\n});\nexport const metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(ofType(action.read.loading), switchMap(() => {\n    return api.get$('/cars').pipe(switchMap(({\n      response\n    }) => {\n      return of(action.readAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.readAction(responder(response)).error)));\n  }));\n}\n\nfunction readOneEpic(action$) {\n  return action$.pipe(ofType(action.readOne.loading), switchMap(({\n    payload\n  }) => {\n    return api.get$(`/cars/${payload.id}`).pipe(switchMap(({\n      response\n    }) => {\n      return of(action.readOneAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.readOneAction(responder(response)).error)));\n  }));\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(ofType(action.create.loading), switchMap(({\n    payload\n  }) => {\n    return api.multipartPost$('/cars', payload).pipe(switchMap(({\n      response\n    }) => {\n      return of(action.createAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.createAction(responder(response)).error)));\n  }));\n}\n\nfunction updateEpic(action$) {\n  return action$.pipe(ofType(action.update.loading), switchMap(({\n    payload\n  }) => {\n    return api.patch$(`/cars/${payload._id}`, payload).pipe(switchMap(({\n      response\n    }) => {\n      return of(action.updateAction(response.data).success);\n    }), catchError(({\n      response\n    }) => of(action.updateAction(responder(response)).error)));\n  }));\n}\n\nexport const epic = combineEpics(readEpic, readOneEpic, createEpic, updateEpic);","map":{"version":3,"sources":["/Users/macbook/Documents/projects/classydrive/classydrive-web/site/src/redux/entities/cars.ts"],"names":["handleActions","createSelector","produce","combineEpics","ofType","catchError","switchMap","of","Actions","entitiesMeta","entities","responder","metas","api","namespaces","action","CARS","selector","state","cars","metaSelector","reducer","read","success","action$","draft","data","payload","readOne","item","exteriorImages","interiorImages","pros","cons","features","similarCars","metaReducer","readEpic","pipe","loading","get$","response","readAction","error","readOneEpic","id","readOneAction","createEpic","create","multipartPost$","createAction","updateEpic","update","patch$","_id","updateAction","epic"],"mappings":"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","sourcesContent":["import { handleActions } from 'redux-actions';\nimport { createSelector } from 'reselect';\nimport { produce } from 'immer';\nimport { combineEpics } from 'redux-observable';\nimport { ofType, catchError, switchMap, of } from 'storejars-react-toolkit/dist/operators';\nimport { Actions, entitiesMeta, entities, responder, metas } from 'storejars-react-toolkit';\n\nimport { api } from '../helpers';\nimport namespaces from '../namespaces';\n\nexport const action = new Actions(namespaces.CARS);\n\nexport const selector = createSelector(entities, (state) => state.cars);\nexport const metaSelector = createSelector(entitiesMeta, (state) => state.cars);\n\nexport const reducer = handleActions(\n  {\n    [action.read.success]: (state, action$) =>\n      produce(state, (draft) => {\n        draft.data = action$.payload;\n        return draft;\n      }),\n    [action.readOne.success]: (state, action$) =>\n      produce(state, (draft) => {\n        draft.item = action$.payload;\n        return draft;\n      }),\n  },\n  { data: [], item: { exteriorImages: [], interiorImages: [], pros: [], cons: [], features: [] }, similarCars: [] },\n);\n\nexport const metaReducer = metas(action);\n\nfunction readEpic(action$) {\n  return action$.pipe(\n    ofType(action.read.loading),\n    switchMap(() => {\n      return api.get$('/cars').pipe(\n        switchMap(({ response }) => {\n          return of(action.readAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.readAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nfunction readOneEpic(action$) {\n  return action$.pipe(\n    ofType(action.readOne.loading),\n    switchMap(({ payload }) => {\n      return api.get$(`/cars/${payload.id}`).pipe(\n        switchMap(({ response }) => {\n          return of(action.readOneAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.readOneAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nfunction createEpic(action$) {\n  return action$.pipe(\n    ofType(action.create.loading),\n    switchMap(({ payload }) => {\n      return api.multipartPost$('/cars', payload).pipe(\n        switchMap(({ response }) => {\n          return of(action.createAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.createAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nfunction updateEpic(action$) {\n  return action$.pipe(\n    ofType(action.update.loading),\n    switchMap(({ payload }) => {\n      return api.patch$(`/cars/${payload._id}`, payload).pipe(\n        switchMap(({ response }) => {\n          return of(action.updateAction(response.data).success);\n        }),\n        catchError(({ response }) => of(action.updateAction(responder(response)).error)),\n      );\n    }),\n  );\n}\n\nexport const epic = combineEpics(readEpic, readOneEpic, createEpic, updateEpic);\n"]},"metadata":{},"sourceType":"module"}