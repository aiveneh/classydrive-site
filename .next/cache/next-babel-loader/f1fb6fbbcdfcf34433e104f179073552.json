{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { windowExists } from 'storejars-react-toolkit';\nimport { metaSelector, action } from '../redux/entities/auth';\nimport { Banner } from '../components';\nimport { LoginForm } from '../partials';\nexport default function Login(props) {\n  const ioRequest = useSelector(state => metaSelector(state).read);\n  const dispatch = useDispatch();\n  const {\n    success,\n    error,\n    loading\n  } = ioRequest;\n\n  const reset = () => dispatch(action.readAction({}).reset);\n\n  if (success) {\n    setTimeout(() => {\n      // TODO, this shoudl be a cline socde redirect\n      windowExists.location.reload();\n    }, 3000);\n  }\n\n  const handleSubmit = values => {\n    dispatch(action.readAction({}).reset);\n    dispatch(action.readAction(values).loading);\n  };\n\n  return __jsx(Fragment, null, __jsx(\"div\", {\n    className: \"center\"\n  }, __jsx(\"div\", {\n    className: \"authBox\"\n  }, __jsx(\"div\", {\n    className: \"result-filter-wrapper mh280\"\n  }, __jsx(\"h3\", null, \"Login\"), __jsx(\"div\", {\n    className: \"content\"\n  }, error && __jsx(Banner.Error, {\n    message: error,\n    reset: reset\n  }), success && __jsx(Banner.Success, {\n    message: \"Login successful\",\n    reset: reset\n  }), __jsx(LoginForm, {\n    type: \"user\",\n    handleSubmit: values => handleSubmit(values),\n    isSubmitting: loading\n  }))))));\n}","map":null,"metadata":{},"sourceType":"module"}